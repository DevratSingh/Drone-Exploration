#!/usr/bin/env python

import sys
import math
import json
import tf_conversions
import tf2_geometry_msgs
import rospy
import tf2_ros 
import tf.transformations as tf_trans
# from tf.transformations import quaternion_from_euler, euler_from_quaternion, concatenate_matrices, translation_matrix, quaternion_matrix
from geometry_msgs.msg import TransformStamped, Vector3, PoseStamped, Transform, Quaternion
from aruco_msgs.msg import MarkerArray
from crazyflie_gazebo.msg import Position


def marker_callback(msg):
    for marker in msg.markers:
        broadcast_marker_transform(marker)

def broadcast_marker_transform(m):
    global trans
    odom_map = PoseStamped()
    odom_aruco = PoseStamped()
    t = TransformStamped()

    m.header.frame_id = 'cf1/camera_link'
    if not tf_buf.can_transform(frame_id, m.header.frame_id, m.header.stamp, rospy.Duration(tf_timeout)):
        rospy.logwarn_throttle(5.0, 'No transform from %s to %s', m.header.frame_id, frame_id)
        return 
    
    # get the aruco's pose in odom frame
    marker = tf_buf.transform(PoseStamped(header=m.header, pose=m.pose.pose), frame_id)
    
    # inverse the transform, get the odom's pose in aruco frame
    trsl =[marker.pose.position.x, marker.pose.position.y, marker.pose.position.z]
    rot = [marker.pose.orientation.x, marker.pose.orientation.y, marker.pose.orientation.z, marker.pose.orientation.w]
    transform = tf_trans.concatenate_matrices(tf_trans.translation_matrix(trsl), tf_trans.quaternion_matrix(rot))
    inversed_transform = tf_trans.inverse_matrix(transform)
    odom_aruco.header = marker.header
    odom_aruco.header.frame_id = 'aruco/marker' + str(m.id)
    odom_aruco.pose.position = Vector3(*tf_trans.translation_from_matrix(inversed_transform))
    odom_aruco.pose.orientation = Quaternion(*tf_trans.quaternion_from_matrix(inversed_transform))
    # print(odom_aruco)


    # get the odom's pose in map frame
    if not tf_buf.can_transform(odom_aruco.header.frame_id, 'map', odom_aruco.header.stamp,rospy.Duration(tf_timeout)):
        rospy.logwarn_throttle(5.0, 'No transform from %s to map' % odom_aruco.header.frame_id)
        return

    # Transform from aruco to map 
    odom_map = tf_buf.transform(odom_aruco, 'map')
    # print(odom_map)

    # only give ywa, x, y to odom/map transform
    t = TransformStamped()
    t.transform.translation = odom_map.pose.position
    t.transform.translation.z = 0
    roll, pitch, yaw = tf_trans.euler_from_quaternion((odom_map.pose.orientation.x,
                                                       odom_map.pose.orientation.y,
                                                       odom_map.pose.orientation.z,
                                                       odom_map.pose.orientation.w))
    (t.transform.rotation.x,
     t.transform.rotation.y,
     t.transform.rotation.z,
     t.transform.rotation.w) = tf_trans.quaternion_from_euler(0,
                                                                  0,
                                                                  yaw)
    
    trans.transform = t.transform
    rospy.sleep(rospy.Duration(1)) # this is the rate at which we update the odom from measurements


rospy.init_node('ArucoLocalization')
sub_marker = rospy.Subscriber('/aruco/markers', MarkerArray, marker_callback, queue_size=1)
tf_buf = tf2_ros.Buffer()
tf_lstn  = tf2_ros.TransformListener(tf_buf)
br = tf2_ros.TransformBroadcaster()
tf_timeout = 2
frame_id = 'cf1/odom'

trans = TransformStamped()
trans.transform.rotation.w = 1
trans.header.frame_id = 'map'
trans.child_frame_id = 'cf1/odom'


def main():
    global trans
    rate = rospy.Rate(40) # a too fast rate will cause a lot of wobbling in the drone between aruco measurements

    while not rospy.is_shutdown():

        trans.header.stamp = rospy.Time.now()
        br.sendTransform(trans)
        rate.sleep()

    
if __name__ == '__main__':
    main()
